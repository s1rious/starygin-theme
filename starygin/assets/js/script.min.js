let slideUp = (e, t = 400) => {
        e.classList.contains("-anim") || (e.classList.add("-anim"), e.style.transitionProperty = "height, margin, padding", e.style.transitionDuration = t + "ms", e.style.height = e.offsetHeight + "px", e.offsetHeight, e.style.overflow = "hidden", e.style.height = 0, e.style.paddingTop = 0, e.style.paddingBottom = 0, e.style.marginTop = 0, e.style.marginBottom = 0, window.setTimeout((() => {
            e.hidden = !0, e.style.removeProperty("height"), e.style.removeProperty("padding-top"), e.style.removeProperty("padding-bottom"), e.style.removeProperty("margin-top"), e.style.removeProperty("margin-bottom"), e.style.removeProperty("overflow"), e.style.removeProperty("transition-duration"), e.style.removeProperty("transition-property"), e.classList.remove("-anim")
        }), t))
    },
    slideDown = (e, t = 400) => {
        if (!e.classList.contains("-anim")) {
            e.classList.add("-anim"), e.hidden && (e.hidden = !1);
            let s = e.offsetHeight;
            e.style.overflow = "hidden", e.style.height = 0, e.style.paddingTop = 0, e.style.paddingBottom = 0, e.style.marginTop = 0, e.style.marginBottom = 0, e.offsetHeight, e.style.transitionProperty = "height, margin, padding", e.style.transitionDuration = t + "ms", e.style.height = s + "px", e.style.removeProperty("padding-top"), e.style.removeProperty("padding-bottom"), e.style.removeProperty("margin-top"), e.style.removeProperty("margin-bottom"), window.setTimeout((() => {
                e.style.removeProperty("height"), e.style.removeProperty("overflow"), e.style.removeProperty("transition-duration"), e.style.removeProperty("transition-property"), e.classList.remove("-anim")
            }), t)
        }
    },
    slideToggle = (e, t = 400) => e.hidden ? slideDown(e, t) : slideUp(e, t);
class Spoller {
    init() {
        if (this.elements = document.querySelectorAll("[data-spollers]"), this.objects = [], this.elements.length > 0) {
            for (let e = 0; e < this.elements.length; e++) {
                const t = this.elements[e],
                    s = {};
                s.el = t, s.oneSpoller = s.el.hasAttribute("data-one-spoller"), s.items = s.el.querySelectorAll("[data-spoller-item]");
                const o = s.el.dataset.spollers.split(",").map((e => e.trim()));
                s.mediaSettings = {
                    type: o[0],
                    size: o[1]
                }, s.activeItems = Array.from(s.items).filter((e => e.classList.contains("-active"))), this.objects.push(s)
            }
            for (let e = 0; e < this.objects.length; e++) {
                const t = this.objects[e],
                    s = window.matchMedia(`(${t.mediaSettings.type}-width:${t.mediaSettings.size}px)`);
                this.mediaHandler(s, t.el, t.items, t.activeItems, t.oneSpoller), s.addEventListener("change", (e => this.mediaHandler(e, t.el, t.items, t.activeItems, t.oneSpoller)))
            }
        }
    }
    mediaHandler(e, t, s, o, l) {
        if (e.matches) {
            const e = [],
                o = [];
            s.forEach((t => t.classList.contains("-active") ? e.push(t) : o.push(t))), e.length > 0 ? l ? e.length > 1 ? (slideDown(s[0].nextElementSibling, 0), e.forEach((e => {
                e.classList.remove("-active"), e.hasAttribute("data-spoller-item-next") ? slideUp(e.nextElementSibling.nextElementSibling, 0) : slideUp(e.nextElementSibling, 0)
            })), s[0].classList.add("-active")) : 1 == e.length && slideDown(e[0].nextElementSibling, 0) : e.forEach((e => {
                slideDown(e.nextElementSibling, 0)
            })) : l && (s[0].classList.add("-active"), slideDown(s[0].nextElementSibling, 0)), o.length > 0 && o.forEach((e => {
                e.hasAttribute("data-spoller-item-next") ? slideUp(e.nextElementSibling.nextElementSibling, 0) : slideUp(e.nextElementSibling, 0)
            })), t.items = s, t.oneSpoller = l, t.addEventListener("click", this.actionSpollerElement)
        } else s.forEach((e => {
            e.classList.remove("-active"), slideDown(e.nextElementSibling, 0)
        })), o.length > 0 && o.forEach((e => e.classList.add("-active"))), t.items && t.oneSpoller && (delete t.items, delete t.oneSpoller), t.removeEventListener("click", this.actionSpollerElement)
    }
    actionSpollerElement(e) {
        const t = e.target,
            s = e.currentTarget.items,
            o = e.currentTarget.oneSpoller,
            l = Array.from(s).filter((e => e.nextElementSibling.classList.contains("-anim")));
        if (t.closest("[data-spoller-item]")) {
            const a = t.closest("[data-spoller-item]");
            a.querySelector("[data-spoller-openner]") && !t.closest("[data-spoller-openner]") || (e.preventDefault(), 0 === l.length && (a.classList.contains("-active") ? o || (a.classList.remove("-active"), slideUp(a.nextElementSibling)) : (slideDown(a.nextElementSibling), o && s.forEach((e => {
                e.classList.remove("-active"), slideUp(e.nextElementSibling)
            })), a.classList.add("-active"))))
        }
    }
}
const spoller = new Spoller;
spoller.init();
class Me {
    constructor(e) {
        this.typeMedia = e
    }
    init() {
        if (this.elements = document.querySelectorAll("[data-me]"), this.objects = [], this.elements.length > 0) {
            for (let e = 0; e < this.elements.length; e++) {
                const t = this.elements[e],
                    s = {};
                s.el = t;
                const o = t.dataset.me.split(",").map((e => e.trim()));
                s.dataAttr = {
                    size: o[0],
                    block: o[1],
                    index: o[2]
                }, s.parentElement = s.el.parentElement, s.indexParent = Array.from(s.parentElement.children).indexOf(s.el), this.objects.push(s)
            }
            for (let e = 0; e < this.objects.length; e++) {
                const t = this.objects[e],
                    s = window.matchMedia(`(${this.typeMedia}-width:${t.dataAttr.size}px)`);
                this.mediaHandler(s, t), s.addEventListener("change", (e => this.mediaHandler(e, t)))
            }
        }
    }
    mediaHandler(e, t) {
        e.matches ? (t.el.classList.add("-me"), this.moveTo(t.el, t.dataAttr.block, t.dataAttr.index)) : (t.el.classList.remove("-me"), this.moveBack(t.el, t.parentElement, t.indexParent))
    }
    moveTo(e, t, s) {
        if (document.querySelector(t)) {
            const o = document.querySelector(t),
                l = o.children,
                a = "first" == s ? 0 : "last" == s ? void 0 : s;
            null != l[a] ? l[a].insertAdjacentElement("beforebegin", e) : o.insertAdjacentElement("beforeend", e)
        }
    }
    moveBack(e, t, s) {
        const o = t.children;
        null != o[s] ? o[s].insertAdjacentElement("beforebegin", e) : t.insertAdjacentElement("beforeend", e)
    }
}
const me = new Me("max");
me.init();
class Tabs {
    init() {
        if (this.elements = document.querySelectorAll("[data-tab]"), this.objects = [], this.elements.length > 0) {
            for (let e = 0; e < this.elements.length; e++) {
                const t = this.elements[e],
                    s = {};
                s.el = t, s.el.children[0].children[0] && (s.el.children[0].children[0].hasAttribute("data-tab-item") ? s.items = Array.from(s.el.children[0].children) : (s.el.children[0].children[0].children[0].hasAttribute("data-tab-subitem") || s.el.children[0].children[0].children[0].hasAttribute("data-tab-item")) && (s.items = Array.from(s.el.children[0].children[0].children))), s.contents = Array.from(s.el.children[1].children), s.activeItems = Array.from(s.items).filter((e => e.classList.contains("-active"))), s.itemLabel = s.el.hasAttribute("data-tab-item-label");
                const o = s.el.dataset.tab.split(",").map((e => e.trim()));
                s.mediaSettings = {
                    type: o[0],
                    size: o[1]
                }, this.objects.push(s)
            }
            for (let e = 0; e < this.objects.length; e++) {
                const t = this.objects[e],
                    s = window.matchMedia(`(${t.mediaSettings.type}-width:${t.mediaSettings.size}px)`);
                this.mediaHandler(s, t.el, t.items, t.contents, t.activeItems, t.itemLabel, t), s.addEventListener("change", (e => this.mediaHandler(e, t.el, t.items, t.contents, t.activeItems, t.itemLabel, t)))
            }
        }
    }
    mediaHandler(e, t, s, o, l, a, i) {
        if (e.matches) {
            let e = [];
            const l = [];
            s.forEach((t => t.classList.contains("-active") ? e.push(t) : l.push(t))), e.length > 0 ? (e.length > 1 && (s.forEach((e => e.classList.remove("-active"))), s[0].classList.add("-active"), e = [s[0]], a && slideDown(e[0].nextElementSibling, 0)), a && (e.forEach((e => slideDown(e.nextElementSibling, 0))), s.forEach((e => {
                e.hasAttribute("data-spoller-item-next") ? slideUp(e.nextElementSibling.nextElementSibling, 0) : slideUp(e.nextElementSibling, 0)
            })))) : (s[0].classList.add("-active"), e = [s[0]], a && (e.forEach((e => slideDown(e.nextElementSibling, 0))), s.forEach((e => {
                e.hasAttribute("data-spoller-item-next") ? slideUp(e.nextElementSibling.nextElementSibling, 0) : slideUp(e.nextElementSibling, 0)
            }))));
            const i = [],
                n = [];
            e[0].dataset.tabItem ? o.forEach((t => t.dataset.tabContent == e[0].dataset.tabItem ? i.push(t) : n.push(t))) : e[0].dataset.tabSubitem && o.forEach((t => t.dataset.tabContent == e[0].dataset.tabSubitem ? i.push(t) : n.push(t))), i[0].classList.add("-active"), this.animShow(i[0], !1), n.forEach((e => {
                e.classList.contains("-active") && e.classList.remove("-active"), this.animHide(e, !1)
            })), t.contents = o, t.thisCLass = this, t.items = s, t.itemLabel = a, t.addEventListener("click", this.actionTabElement)
        } else s.forEach((e => {
            e.classList.remove("-active"), a && s.forEach((e => {
                slideDown(e.nextElementSibling, 0)
            }))
        })), o.forEach((e => {
            e.classList.remove("-active"), this.animShow(e, !1, !0)
        })), l && l.forEach((e => e.classList.add("-active"))), t.removeEventListener("click", this.actionTabElement)
    }
    actionTabElement(e) {
        const t = e.target,
            s = e.currentTarget.contents,
            o = e.currentTarget.thisCLass,
            l = e.currentTarget.itemLabel;
        if (t.closest("[data-tab-item]") || t.closest("[data-tab-subitem]") && t.closest(".-parent-tab-item")) {
            let a, i;
            e.preventDefault();
            const n = t.closest(".-parent-tab-item").children;
            if (t.closest("[data-tab-item]") ? i = t.closest("[data-tab-item]").closest("[data-tab-items]").nextElementSibling.children : t.closest("[data-tab-subitem]") && (i = t.closest("[data-tab-subitem]").closest("[data-tab-items]").nextElementSibling.children), a = Array.from(i).filter((e => e.classList.contains("-anim"))), 0 === a.length) {
                let e;
                if (t.closest("[data-tab-item]") ? e = t.closest("[data-tab-item]") : t.closest("[data-tab-subitem]") && (e = t.closest("[data-tab-subitem]")), !e.classList.contains("-active")) {
                    let t = [];
                    const a = [];
                    e.dataset.tabItem ? s.forEach((s => s.dataset.tabContent == e.dataset.tabItem ? t.push(s) : a.push(s))) : e.dataset.tabSubitem && s.forEach((s => s.dataset.tabContent == e.dataset.tabSubitem ? t.push(s) : a.push(s))), Array.from(n).forEach((e => e.classList.remove("-active"))), e.classList.add("-active"), t[0].classList.add("-active"), o.animShow(t[0]), a.forEach((e => {
                        o.animHide(e), e.classList.remove("-active")
                    })), setTimeout((() => {
                        ssb.refresh()
                    }), 150), l && (slideDown(e.nextElementSibling), n.forEach((e => {
                        slideUp(e.nextElementSibling)
                    })))
                }
            }
        }
    }
    animHide(e, t = !0) {
        t ? (e.style.opacity = "0.5", e.classList.add("-anim"), setTimeout((() => {
            e.style.display = "none", e.classList.remove("-anim")
        }), 150)) : (e.style.opacity = "0.5", e.style.display = "none")
    }
    animShow(e, t = !0, s = !1) {
        t ? setTimeout((() => {
            e.style.display = "block", e.classList.add("-anim"), setTimeout((() => {
                e.style.opacity = "1", e.classList.remove("-anim")
            }), 100)
        }), 150) : (e.style.opacity = "1", e.style.display = "block"), s && (e.style.removeProperty("opacity"), e.style.removeProperty("display"))
    }
}
const tabs = new Tabs;
tabs.init();
class ValidateForm {
    constructor(e, t) {
        this.form = e, this.objUser = t, e.addEventListener("submit", (s => this.formSend(s, this, e, t)))
    }
    async formSend(e, t, s, o) {
        e.preventDefault();
        if (0 === t.validateForm(s, o)) {
            s.classList.add("-sending");
            new FormData(s);
            if ((await fetch(o.url, {
                    method: o.method
                })).ok ? console.log("result") : console.log("Error"), s.reset(), o.items.input && o.items.input.length > 0 && o.items.input.forEach((e => {
                    e.blur()
                })), s.querySelectorAll(".-custom-select")) {
                s.querySelectorAll(".-custom-select").forEach((e => e.reset()))
            }
            s.classList.remove("-sending")
        } else console.log("Emptly")
    }
    validateForm(e, t) {
        let s = 0;
        for (const e in t.items) {
            const o = t.items[e];
            if ("input" == e && o.length > 0 && o.forEach((e => {
                    this.removeError(e), e.classList.contains("-tel") ? this.telTest(e) && (this.addError(e), s++) : e.classList.contains("-email") ? this.emailTest(e) && (this.addError(e), s++) : e.classList.contains("-password") ? (e.value.length < 8 || e.value.length > 10) && (this.addError(e), s++, e.value.length < 8 && console.log("passswod 8"), e.value.length > 10 && console.log("passswod 10")) : e.value || (this.addError(e), s++)
                })), "checkbox" == e && o.length > 0 && o.forEach((e => {
                    this.removeError(e), e.checked || (this.addError(e), s++)
                })), "radio" == e && o.length > 0) {
                const e = {};
                o.forEach((t => {
                    e[t.name] || (e[t.name] = []), e[t.name].push(t)
                }));
                for (const t in e) {
                    const o = e[t],
                        l = Array.from(o).filter((e => e.checked))[0];
                    o.forEach((e => {
                        this.removeError(e)
                    })), l || o.forEach((e => {
                        this.addError(e), s++
                    }))
                }
            }
            "select" == e && o.length > 0 && o.forEach((e => {
                e.classList.remove("-error"), e.classList.contains("-custom-select-no-choose") && (e.classList.add("-error"), s++)
            }))
        }
        return s
    }
    removeError(e) {
        e.parentElement.classList.remove("-error"), e.classList.remove("-error");
        const t = e.closest("form");
        t.classList.contains("-error") && t.classList.remove("-error")
    }
    addError(e) {
        e.parentElement.classList.add("-error"), e.classList.add("-error");
        const t = e.closest("form");
        t.classList.contains("-error") || t.classList.add("-error")
    }
    emailTest(e) {
        return !/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/.test(e.value)
    }
    telTest(e) {
        return !/^((8|\+7)[\- ]?)?(\(?\d{3,4}\)?[\- ]?)?[\d\- ]{5,10}$/.test(e.value)
    }
}
const inputsValue = document.querySelectorAll("[data-value]");
inputsValue.length > 0 && inputsValue.forEach((e => {
    const t = e.dataset.value;
    e.value || (e.placeholder = t), e.addEventListener("focus", (() => {
        e.placeholder = ""
    })), e.addEventListener("blur", (() => {
        e.placeholder = t
    }))
}));
class LoadMore {
    constructor(e) {
        const t = document.querySelector(e.el);
        t && t.addEventListener("click", (s => {
            s.preventDefault(), t.classList.contains("-hold") || t.classList.contains("-close") || (t.classList.add("-hold"), this.loadMore(e, t))
        }))
    }
    async loadMore(e, t) {
        const s = await fetch(e.url, {
            method: "GET"
        });
        if (s.ok) {
            const o = await s[e.method]();
            setTimeout((() => {
                e.afterGet(o, t)
            }), 700)
        }
    }
}
class Popup {
    init() {
        this.elements = document.querySelectorAll("[data-popup-link]"), this.objects = [], this.elements.length > 0 && document.addEventListener("click", (e => this.actionPopupDocument(e, this)))
    }
    actionPopupDocument(e, t) {
        const s = e.target,
            o = document.querySelectorAll("[data-popup].-anim");
        if (s.closest("[data-popup-link]") && (e.preventDefault(), 0 === o.length)) {
            const e = s.closest("[data-popup-link]"),
                o = document.querySelectorAll("[data-popup].-open");
            if (o.forEach((e => e.classList.remove("-open"))), document.querySelector(`${e.dataset.popupLink}`)) {
                const s = document.querySelector(`${e.dataset.popupLink}`);
                o.length > 0 ? t.openPopup(s, !1) : t.openPopup(s)
            }
        }
        if (s.closest("[data-popup-close]") && (e.preventDefault(), 0 === o.length)) {
            const e = s.closest("[data-popup-close]").closest("[data-popup]");
            t.closePopup(e)
        }
        if (s.closest("[data-popup]") && !s.closest("[data-popup-content]") && 0 === o.length) {
            const e = s.closest("[data-popup]");
            t.closePopup(e)
        }
    }
    openPopup(e, t = !0) {
        e.classList.add("-open"), e.classList.add("-anim"), setTimeout((() => {
            e.classList.remove("-anim")
        }), 400), t && (this.actionPadding(), document.body.classList.add("-lock-popup"))
    }
    closePopup(e) {
        e.classList.add("-anim"), e.classList.remove("-open"), setTimeout((() => {
            this.actionPadding(!1), document.body.classList.remove("-lock-popup"), e.classList.remove("-anim")
        }), 400)
    }
    actionPadding(e = !0) {
        const t = [];
        t.push(document.body);
        const s = document.querySelectorAll(".-popup-padding");
        if (s.length > 0 && s.forEach((e => t.push(e))), e) {
            const e = window.innerWidth - document.querySelector(".wrapper").offsetWidth;
            t.forEach((t => {
                t.style.paddingRight = e + "px"
            }))
        } else t.forEach((e => {
            e.style.paddingRight = ""
        }))
    }
}
const popup = new Popup;
popup.init();
const isMobile = {
        Android: function () {
            return navigator.userAgent.match(/Android/i)
        },
        BlackBerry: function () {
            return navigator.userAgent.match(/BlackBerry/i)
        },
        iOS: function () {
            return navigator.userAgent.match(/iPhone|iPad|iPod/i)
        },
        Opera: function () {
            return navigator.userAgent.match(/Opera Mini/i)
        },
        Windows: function () {
            return navigator.userAgent.match(/IEMobile/i)
        },
        any: function () {
            return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows()
        }
    },
    mqlMax = window.matchMedia("(max-width: 767.98px)");
let ssb = {
    aConts: [],
    mouseY: 0,
    N: 0,
    asd: 0,
    sc: 0,
    sp: 0,
    to: 0,
    scrollbar: function (e) {
        if (!ssb.init()) return !1;
        ssb.aConts[ssb.N++] = e, e.insertAdjacentHTML("afterbegin", "<div data-scroll-wrap></div>");
        const t = e.querySelector("[data-scroll-wrap]"),
            s = e.querySelector("[data-scroll-content]");
        return t.insertAdjacentElement("afterbegin", s), t.insertAdjacentHTML("afterend", '<div data-scroll-scrollbar-arrow data-scroll-scrollbar-arrow-up class="-arrow-slider"><span class="-icon-arrow-right"></span></div>\n         <div data-scroll-scrollbar-arrow data-scroll-scrollbar-arrow-down class="-arrow-slider"><span class="-icon-arrow-right"></span></div>\n         <div data-scroll-scrollbar>\n            <div data-scroll-scrollbar-overlay></div>\n            <div data-scroll-scrollbar-scroller></div>\n         </div>'), t.wrap = e.querySelector("[data-scroll-scrollbar]"), t.st = e.querySelector("[data-scroll-scrollbar-overlay]"), t.sb = e.querySelector("[data-scroll-scrollbar-scroller]"), t.su = e.querySelector("[data-scroll-scrollbar-arrow-up]"), t.sd = e.querySelector("[data-scroll-scrollbar-arrow-down]"), t.contentElement = s, isMobile.any() ? (t.wrap.style.display = "none", t.su.style.display = "none", t.sd.style.display = "none", t.style.width = "100%", t.removeAttribute("data-scroll-hidden")) : (t.wrap.style.display = "", t.su.style.display = "", t.sd.style.display = "", t.setAttribute("data-scroll-hidden", "")), (e = t).sw = e.wrap.offsetWidth, e.scrollerMargin = 2, e.sg = !1, e.style.paddingRight = `${e.sw}px`, e.sb.onmousedown = function (t) {
            return e.sg || (t || (t = window.event), ssb.asd = e, e.yZ = t.screenY, e.sZ = e.scrollTop, e.sg = !0), !1
        }, e.st.onmousedown = function (t) {
            t || (t = window.event), ssb.asd = e, ssb.mouseY = t.clientY + document.body.scrollTop + document.documentElement.scrollTop;
            for (var s = e, o = 0; null != s; s = s.offsetParent) o += s.offsetTop;
            e.scrollTop = (ssb.mouseY - o - e.ratio * e.offsetHeight / 2 - e.sw) / e.ratio, e.sb.onmousedown(t)
        }, e.su.onmousedown = e.su.ondblclick = function (t) {
            return ssb.mousedown(e, -1, t), !1
        }, e.sd.onmousedown = e.sd.ondblclick = function (t) {
            return ssb.mousedown(e, 1, t), !1
        }, e.su.onmouseout = e.su.onmouseup = ssb.clear, e.sd.onmouseout = e.sd.onmouseup = ssb.clear, e.ssb_onscroll = function () {
            this.ratio = (this.offsetHeight - 2 * this.scrollerMargin) / this.scrollHeight, this.sb.style.top = `${Math.floor(this.scrollerMargin+this.scrollTop*this.ratio)}px`
        }, e.ssb_onscroll(), ssb.refresh(), e.onscroll = e.ssb_onscroll, e
    },
    init: function () {
        if (window.oper || !window.addEventListener && !window.attachEvent) return !1;

        function e(e, t, s) {
            return window.addEventListener ? (e.addEventListener(t, s, !1), ssb.w3c = !0, !0) : !!window.attachEvent && e.attachEvent("on" + t, s)
        }
        return e(window.document, "mousemove", ssb.onmousemove), e(window.document, "mouseup", ssb.onmouseup), e(window, "resize", ssb.refresh), !0
    },
    create_div: function (e, t, s) {
        let o = document.createElement("div");
        return o.el = t, o.className = e, s.appendChild(o), o
    },
    clear: function () {
        return clearTimeout(ssb.to), ssb.sc = 0, !1
    },
    refresh: function () {
        for (let e = 0, t = ssb.N; e < t; e++) {
            let t = ssb.aConts[e].querySelector("[data-scroll-wrap]");
            t.ssb_onscroll(), t.sb.style.height = `${Math.ceil(Math.max(.5*t.sw,t.ratio*t.offsetHeight))}px`, t.sw = t.wrap.offsetWidth, t.style.paddingRight = `${t.sw}px`, t.contentElement.offsetHeight < t.offsetHeight && (t.wrap.style.display = "none", t.style.paddingRight = "0px")
        }
    },
    arrow_scroll: function () {
        0 != ssb.sc && (ssb.asd.scrollTop += 6 * ssb.sc / ssb.asd.ratio, ssb.to = setTimeout(ssb.arrow_scroll, ssb.sp), ssb.sp = 32)
    },
    mousedown: function (e, t, s) {
        if (0 == ssb.sc) {
            const t = s.target.closest("[data-scroll-scrollbar-arrow]"),
                o = e.closest("[data-tab-items]").querySelector("[data-scroll-content]").querySelector("[data-tab-subitem].-active");
            if (o) {
                let e = t.hasAttribute("data-scroll-scrollbar-arrow-up") ? o.previousElementSibling : o.nextElementSibling;
                if (e) {
                    e.click();
                    e.closest("[data-scroll-wrap]").scrollTo({
                        top: e.offsetTop,
                        behavior: "smooth"
                    })
                }
            }
        }
    },
    onmousemove: function (e) {
        e || (e = window.event), ssb.mouseY = e.screenY, ssb.asd.sg && (ssb.asd.scrollTop = ssb.asd.sZ + (ssb.mouseY - ssb.asd.yZ) / ssb.asd.ratio)
    },
    onmouseup: function (e) {
        e || (e = window.event);
        e.target ? e.target : e.srcElement;
        ssb.asd && document.releaseCapture && ssb.asd.releaseCapture(), document.onselectstart = "", ssb.clear(), ssb.asd.sg = !1
    }
};
window.onload = function () {
    const e = document.querySelectorAll("[data-scroll]");
    e.length && e.forEach((e => {
        ssb.scrollbar(e)
    }))
};
const headerElement = document.querySelector(".header");

function actionDocument(e) {
    const t = e.target;
    if (t.closest(".burger-header")) {
        const e = t.closest(".burger-header"),
            s = document.querySelector(".menu");
        e.classList.toggle("-active"), s.classList.toggle("-open"), headerElement.classList.toggle("-active"), document.body.classList.toggle("-lock")
    }
    if (t.closest('[data-btn-loadmore-news="close"]')) {
        e.preventDefault();
        const s = t.closest('[data-btn-loadmore-news="close"]');
        s.parentElement.classList.add("-hide");
        const o = document.querySelector('[data-btn-loadmore-news="open"]');
        o.classList.remove("-hide"), o.parentElement.classList.remove("-hide");
        const l = document.querySelectorAll(".item-blog.-add");
        l.length > 0 && l.forEach((e => e.remove()));
        const a = s.closest(".blog").getBoundingClientRect().top + scrollY - document.querySelector(".header__height").offsetHeight;
        window.scrollTo({
            top: a,
            behavior: "smooth"
        })
    }
    if (t.closest(".main-screen__mouse a")) {
        e.preventDefault();
        const s = t.closest(".main-screen__mouse a").closest(".main-screen").nextElementSibling;
        if (s) {
            const e = s.getBoundingClientRect().top + scrollY - document.querySelector(".header__height").offsetHeight;
            window.scrollTo({
                top: e,
                behavior: "smooth"
            })
        }
    }
}
document.addEventListener("click", actionDocument);
const factsItem = document.querySelectorAll(".facts__item"),
    mql = window.matchMedia("(min-width: 767.98px)");

function animationFactsImage() {
    factsItem.forEach((e => {
        const t = e.querySelector(".facts__image"),
            s = e.getBoundingClientRect().top + window.scrollY,
            o = e.offsetHeight,
            l = e.querySelector(".facts__main"),
            a = Math.round(+window.getComputedStyle(l, ":before").height.replace("px", "")),
            i = +window.getComputedStyle(e).paddingTop.replace("px", "");
        if (mql.matches) {
            if (window.scrollY > s && window.scrollY < s + a + i) {
                const l = t.offsetHeight,
                    n = +window.getComputedStyle(t).top.replace("px", ""),
                    r = o / 4;
                if (window.scrollY > s + r && window.scrollY < s + a + i - l - n) {
                    const e = r - i,
                        o = 1 - 1 / ((a - e - n - l) / (scrollY - (s + i + e)));
                    isNaN(n) || (t.style.opacity = o > 0 ? o : 0)
                } else window.scrollY < s + r ? e.classList.contains("facts__item_change-color") || (t.style.opacity = 1) : window.scrollY > s + a + i - l - n && (t.style.opacity = 0)
            } else window.scrollY < s - 64 && (e.classList.contains("facts__item_change-color") || (e.style.opacity = 1));
            window.scrollY > s + a ? t.style.opacity = 0 : window.scrollY > s + a + i && (t.style.opacity = "")
        }
        if (e.classList.contains("facts__item_change-color")) {
            const t = e.getBoundingClientRect().top + window.scrollY,
                s = e.querySelector(".facts__image"),
                o = +window.getComputedStyle(e).paddingTop.replace("px", ""),
                l = e.offsetHeight,
                a = s.offsetHeight,
                i = +window.getComputedStyle(s).top.replace("px", ""),
                n = a;
            if (window.scrollY > t - n - o && window.scrollY < t) {
                const l = window.scrollY - (t + 64 - n - i),
                    a = 1 / ((n + i - 64) / l);
                if (!isNaN(i)) {
                    s.style.opacity = a;
                    let t = function (e, t) {
                        let s = [];
                        for (let a = 0; a < 3; a++) s.push(e[a] + (t[a] - e[a]) * l / (n + o));
                        return `rgb(${s.join()})`
                    };
                    document.body.style.backgroundColor = t([237, 236, 235], [49, 38, 41]);
                    e.querySelectorAll(".facts__name, .items-facts__list li, .items-facts__list li::before, .items-facts__label").forEach((e => {
                        e.style.color = t([49, 38, 41], [255, 255, 255]), "LI" == e.tagName && (e.querySelector(".point").style.backgroundColor = t([49, 38, 41], [255, 255, 255]))
                    }))
                }
            } else {
                if (window.scrollY > t) {
                    document.body.style.backgroundColor = "rgb(49, 38, 41)";
                    e.querySelectorAll(".facts__name, .items-facts__list li, .items-facts__list li::before, .items-facts__label").forEach((e => {
                        e.style.color = "rgb(255, 255, 255)", "LI" == e.tagName && (e.querySelector(".point").style.backgroundColor = "rgb(255, 255, 255)")
                    }))
                }
                if (window.scrollY < t - n - o) {
                    s.style.opacity = 0, document.body.style.backgroundColor = "";
                    e.querySelectorAll(".facts__name, .items-facts__list li, .items-facts__list li::before, .items-facts__label").forEach((e => {
                        e.style.color = "", "LI" == e.tagName && (e.querySelector(".point").style.backgroundColor = "")
                    }))
                }
            }
            window.scrollY > t - n - o && window.scrollY < t + l ? e.classList.add("-change-bg") : e.classList.remove("-change-bg")
        }
        mql.matches || (t.style.opacity = 1)
    }))
}
window.addEventListener("scroll", animationFactsImage), window.addEventListener("resize", animationFactsImage), animationFactsImage(), SmoothScroll({
    animationTime: 500,
    stepSize: 75,
    accelerationDelta: 30,
    accelerationMax: 2,
    keyboardSupport: !0,
    arrowScroll: 50,
    pulseAlgorithm: !0,
    pulseScale: 4,
    pulseNormalize: 1,
    touchpadSupport: !0
});
const callback = function (e, t) {
        e[0].isIntersecting ? headerElement.classList.remove("-scroll") : headerElement.classList.add("-scroll")
    },
    headerObserver = new IntersectionObserver(callback);

function parallaxMainPictures(e) {
    try {
        if (scrollY < document.querySelector(".main-screen").offsetHeight && this.querySelectorAll(".main-screen__image").forEach((t => {
                const s = t.getAttribute("data-speed"),
                    o = (window.innerWidth - e.pageX * s) / 100,
                    l = (window.innerHeight - e.pageY * s) / 100;
                t.style.transform = `translateX(${o}px) translateY(${l}px)`
            })));
    } catch (e) {

    }
}

function activeSlidersWork() {
    const e = document.querySelectorAll(".slider-info-work__body");
    e.length > 0 && e.forEach((e => {
        new Swiper(e, {
            navigation: {
                nextEl: e.parentElement.querySelector(".-arrow-slider_next"),
                prevEl: e.parentElement.querySelector(".-arrow-slider_prev")
            },
            pagination: {
                el: e.parentElement.querySelector(".slider-info-work__fraction"),
                type: "fraction"
            },
            simulateTouch: !0,
            grabCursor: !0,
            speed: 500,
            watchOverflow: !1,
            nested: !0,
            effect: "fade",
            fadeEffect: {
                crossFade: !0
            }
        })
    }))
}
headerObserver.observe(headerElement), document.addEventListener("mousemove", parallaxMainPictures), activeSlidersWork();
const formsContact = document.querySelectorAll(".-contact-form");
formsContact.length > 0 && formsContact.forEach((e => {
    new ValidateForm(e, {
        method: "GET",
        url: "",
        items: {
            input: e.querySelectorAll('input[type="text"].-req, input[type="tel"].-req'),
            checkbox: e.querySelectorAll('input[type="checkbox"].-req')
        }
    })
}));
const sliderReviews = new Swiper(".slider-reviews__body", {
    navigation: {
        nextEl: ".slider-reviews__arrows .-arrow-slider_next",
        prevEl: ".slider-reviews__arrows .-arrow-slider_prev"
    },
    simulateTouch: !1,
    watchOverflow: !1,
    spaceBetween: 69,
    speed: 600,
    initialSlide: 1
});

function animateMarquee(e, t) {
    const s = e.querySelector("[data-marquee-inner]"),
        o = s.offsetWidth,
        l = s.cloneNode(!0);
    e.appendChild(l);
    let a, i, n = performance.now();
    requestAnimationFrame((function e(r) {
        a = (r - n) / t, a > 1 && (a %= 1, n = r), i = o * a, s.style.transform = `translate3d(-${i}px, 0 , 0)`, l.style.transform = `translate3d(-${i}px, 0 , 0)`, requestAnimationFrame(e)
    }))
}
const marqueeElemnets = document.querySelectorAll("[data-marquee]");
marqueeElemnets.length > 0 && marqueeElemnets.forEach((e => {
    animateMarquee(e, e.dataset.marquee)
})), new LoadMore({
    el: '[data-btn-loadmore-news="open"]',
    url: "./json/news.json",
    method: "json",
    afterGet: function (e, t) {
        e.news.forEach((e => {
            const t = `\n         <div class="blog__item item-blog -add">\n            <a href="" class="item-blog__link"></a>\n            <div class="item-blog__image -ai"><img src="${e.img}" alt=""></div>\n            <div class="item-blog__content">\n               <div class="item-blog__header">\n                  <h4 class="item-blog__title">${e.title}</h4>\n                  <div class="item-blog__date">${e.date}</div>\n               </div>\n               <div class="item-blog__text">${e.text}</div>\n            </div>\n         </div>\n         `;
            document.querySelector(".blog__grid").insertAdjacentHTML("beforeend", t)
        })), t.classList.remove("-hold"), t.classList.add("-hide");
        const s = document.querySelector('[data-btn-loadmore-news="close"]');
        767.98 > window.innerWidth && t.parentElement.classList.add("-hide"), s.parentElement.classList.remove("-hide")
    }
}), document.addEventListener("DOMContentLoaded", (function () {
    const e = document.querySelector(".consultations__text span:nth-child(1)"),
        t = document.querySelector(".consultations__text span:nth-child(2)");
    var s = new Date;
    s.setMinutes(s.getMinutes() + +e.parentElement.dataset.time);
    const o = {
            year: (new Date).getFullYear(),
            month: (new Date).getMonth() + 1,
            day: (new Date).getDay(),
            hours: s.getHours(),
            minutes: s.getMinutes()
        },
        l = new Date(o.year, o.month, o.day, o.hours, o.minutes, (new Date).getSeconds());
    let a = null;

    function i() {
        let s = !0;
        if ("00" == e.innerHTML && "00" == t.innerHTML && (s = !1), s) {
            const s = l - new Date;
            s <= 0 && clearInterval(a);
            const o = s > 0 ? Math.floor(s / 1e3 / 60) % 60 : 0,
                i = s > 0 ? Math.floor(s / 1e3) % 60 : 0;
            e.textContent = o < 10 ? "0" + o : o, t.textContent = i < 10 ? "0" + i : i
        }
    }
    i(), a = setInterval(i, 1e3)
}));
const mqlTabletMax = window.matchMedia("(max-width: 767.98px)");

function activeSlidersQuestions(e) {
    if (e.matches) {
        const e = document.querySelectorAll(".works");
        0 != e.length && e.forEach((e => {
            if (e.sliderMini = null, e.sliderBig = null, !e.sliderMini) {
                for (let t = 0; t < 2; t++) {
                    const s = '\n                  <div class="works__arrow works__arrow_prev"><span class="-icon-arrow-right"></span></div>\n                  <div class="works__arrow works__arrow_next"><span class="-icon-arrow-right"></span></div>';
                    e.insertAdjacentHTML("beforebegin", `<div class="works__body works__body_${0==t?"mini":"big"} swiper">\n                        <div class="works__wrapper swiper-wrapper"></div>\n                        ${0==t?s:""}\n                     </div>`)
                }
                const t = e.previousElementSibling.previousElementSibling,
                    s = e.previousElementSibling,
                    o = e.querySelectorAll("[data-tab-subitem]"),
                    l = e.querySelectorAll("[data-tab-content]");
                o.forEach((e => {
                    let s = e.innerHTML;
                    t.querySelector(".swiper-wrapper").insertAdjacentHTML("beforeend", `<div class="works__item swiper-slide">${s}</div>`), e.remove()
                })), l.forEach((e => {
                    e.classList.add("swiper-slide"), s.querySelector(".swiper-wrapper").append(e)
                })), e.sliderMini = new Swiper(t, {
                    navigation: {
                        nextEl: t.querySelector(".works__arrow_next"),
                        prevEl: t.querySelector(".works__arrow_prev")
                    },
                    simulateTouch: !0,
                    watchOverflow: !1,
                    effect: "fade",
                    speed: 500,
                    fadeEffect: {
                        crossFade: !0
                    }
                }), e.sliderBig = new Swiper(s, {
                    simulateTouch: !0,
                    watchOverflow: !1,
                    speed: 500,
                    effect: "fade",
                    fadeEffect: {
                        crossFade: !0
                    }
                }), e.sliderBig.controller.control = e.sliderMini, e.sliderMini.controller.control = e.sliderBig
            }
        }))
    } else {
        const e = document.querySelectorAll(".works");
        0 != e.length && e.forEach((e => {
            if (e.previousElementSibling) {
                const t = e.previousElementSibling.previousElementSibling,
                    s = e.previousElementSibling,
                    o = t.querySelectorAll(".swiper-slide"),
                    l = s.querySelectorAll(".works__content");
                o.forEach(((t, s) => {
                    let o = t.innerHTML;
                    e.querySelector("[data-tab-items] [data-scroll-content]").insertAdjacentHTML("beforeend", `<a href="" class="works__item" data-tab-subitem="${++s}">${o}</a>`), t.remove()
                })), e.querySelector("[data-tab-items] [data-scroll-content] [data-tab-subitem]").click(), l.forEach((t => {
                    t.classList.remove("swiper-slide"), e.querySelector("[data-tab-items]").nextElementSibling.append(t)
                })), t.remove(), s.remove()
            }
            e.sliderMini && e.sliderBig && [e.sliderMini, e.sliderBig].forEach((e => {
                e.destroy(), e = null
            }))
        }))
    }
}
mqlTabletMax.addEventListener("change", activeSlidersQuestions), activeSlidersQuestions(mqlTabletMax);